CREATE SEQUENCE hibernate_sequence;


create SCHEMA IF NOT EXISTS transtour;
SET SCHEMA transtour;


CREATE SEQUENCE travel_id_seq
MINVALUE 1
MAXVALUE 999999999
INCREMENT BY 1
START WITH 1
NOCACHE
NOCYCLE;



drop table IF EXISTS  transtour.cars;

create table transtour.cars (
    car_id varchar(255) not null,
    brand varchar(255),
    model varchar(255),
    patent varchar(255),
    release_year date,
    primary key (car_id)
);


 drop table IF EXISTS  transtour.company ;


create table transtour.company (
        company_id varchar(255) not null,
        cuit varchar(255),
        disposition_time_amount double,
        email varchar(255),
        full_name varchar(255),
        nick_name varchar(255),
        phone varchar(255),
        whiting_time_amount double,
        primary key (company_id)
    );


 drop table IF EXISTS  transtour.travels;



create table transtour.travels (
       id bigint not null,
        car_driver varchar(255),
        company varchar(255),
        payload varchar(10000) not null,
        created_at timestamp,
        created_by varchar(255),
        modified_by varchar(255),
        status varchar(255),
        updated_at timestamp,
        PRIMARY KEY (id)
    );


 drop table IF EXISTS  transtour.revinfo ;


create table revinfo (
    rev integer generated by default as identity,
    revtstmp bigint,
    primary key (rev)
);

drop table IF EXISTS  transtour.travels_aud;

create table transtour.travels_aud (
   id bigint not null,
    rev                INTEGER , -- The version number of the entity.
    revend             INTEGER , -- The version of the next version number after entity gets updated.
    revtype            INTEGER, -- The type of the revision.
    revend_tstmp       TIMESTAMP, -- The timestamp of the next version number after entity gets updated.
    car_driver varchar(255),
    car_driver_mod boolean,
    company varchar(255),
    company_mod boolean,
    created_at timestamp,
    created_at_mod boolean,
    updated_at timestamp,
    updated_at_mod boolean,
    created_by varchar(255),
    created_by_mod boolean,
    modified_by varchar(255),
    modified_by_mod boolean,
    payload varchar(100000),
    payload_mod boolean,
    status varchar(255),
    status_mod boolean,
    primary key (id, rev)
);

 drop table IF EXISTS  transtour.users ;

 create table transtour.users (
        user_id varchar(255) not null,
        dni varchar(255),
        email varchar(255),
        full_name varchar(255),
        password varchar(255),
        phone varchar(255),
        status varchar(255),
        token_id varchar(255),
        primary key (user_id)
    );

  drop table IF EXISTS  transtour.user_role ;


  create table transtour.user_role (
        user_id varchar(255) not null,
        role_id varchar(255) not null,
        primary key (user_id, role_id)
    );


  drop table IF EXISTS  transtour.roles;


  create table transtour.roles(
        role_id varchar(255) not null,
        name varchar(255) not null,
        primary key (role_id)
    );


drop table IF EXISTS  transtour.session_tokens ;


create table transtour.session_tokens (
       id varchar(255) not null,
        expired boolean not null,
        revoked boolean not null,
        token varchar(255),
        token_type varchar(255),
        user_id varchar(255),
        primary key (id),
        foreign key (user_id) references transtour.users (user_id)
    );



 drop table IF EXISTS  transtour.firebase_token;


create table transtour.firebase_token (
       id varchar(255) not null,
        device_type varchar(255),
        token varchar(255),
        user_id varchar(255),
        primary key (id),
        foreign key (user_id)
        references transtour.users (user_id)

    );